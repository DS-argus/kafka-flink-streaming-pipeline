x-airflow-common:
  &airflow-common
  build:
    context: ./airflow
    dockerfile: Dockerfile
  image: custom-airflow:3.0.3
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__CORE__AUTH_MANAGER: airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-postgres/airflow
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__CORE__EXECUTION_API_SERVER_URL: 'http://airflow-apiserver:8080/execution/'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    AIRFLOW_CONFIG: '/opt/airflow/config/airflow.cfg'
  volumes:
    - ./airflow/dags:/opt/airflow/dags
    - ./airflow/logs:/opt/airflow/logs
    - ./airflow/plugins:/opt/airflow/plugins
    - ./airflow/config:/opt/airflow/config
    - ./flink-jobs:/opt/airflow/flink-jobs
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    airflow-postgres:
      condition: service_healthy


services:
  kafka-broker-1:
    image: confluentinc/cp-kafka:7.5.0
    hostname: kafka-broker-1
    container_name: kafka-broker-1
    user: root
    ports:
      - "9092:9092"  # localhost:9092로 접근하면 kafka-broker-1:9092로 접근하는데 kafka가 어떤 Listener로 처리하는지는 아래에서 결정
    environment:
      KAFKA_NODE_ID: 1
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka-broker-1:29093,2@kafka-broker-2:29093,3@kafka-broker-3:29093'

      # 3가지 종류의 Listener를 정의
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT_HOST:PLAINTEXT,PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://kafka-broker-1:29092,PLAINTEXT_HOST://0.0.0.0:9092,CONTROLLER://kafka-broker-1:29093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker-1:29092,PLAINTEXT_HOST://localhost:9092

      # LISTENER 이름별 역할 지정 : 여기서 따로 정의안한건 Client 접근용
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_INTER_BROKER_LISTENER_NAMES: 'PLAINTEXT'

      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_DIRS: '/var/lib/kafka/data'

      # JMX 설정 추가
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: localhost

      KAFKA_HEAP_OPTS: "-Xms2g -Xmx2g"          # 힙을 2 GB 고정
      KAFKA_JVM_PERFORMANCE_OPTS: "-XX:+UseG1GC -XX:MaxGCPauseMillis=200"

    healthcheck:
      test: ["CMD", "/bin/kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
    restart: unless-stopped
    volumes:
      - kafka-data-1:/var/lib/kafka/data
    networks:
      - kafka-network

  kafka-broker-2:
    image: confluentinc/cp-kafka:7.5.0
    hostname: kafka-broker-2
    container_name: kafka-broker-2
    user: root
    ports:
      - "9094:9094"
    environment:
      KAFKA_NODE_ID: 2
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka-broker-1:29093,2@kafka-broker-2:29093,3@kafka-broker-3:29093'
      
      # 3가지 종류의 Listener를 정의
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT_HOST:PLAINTEXT,PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://kafka-broker-2:29092,PLAINTEXT_HOST://0.0.0.0:9094,CONTROLLER://kafka-broker-2:29093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker-2:29092,PLAINTEXT_HOST://localhost:9094

      # LISTENER 이름별 역할 지정 : 여기서 따로 정의안한건 Client 접근용
      KAFKA_INTER_BROKER_LISTENER_NAMES: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'

      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_DIRS: '/var/lib/kafka/data'

      # JMX 설정 추가
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: localhost

    healthcheck:
      test: ["CMD", "/bin/kafka-topics", "--bootstrap-server", "localhost:9094", "--list"]
      interval: 10s
      timeout: 5s
    restart: unless-stopped
    volumes:
      - kafka-data-2:/var/lib/kafka/data
    networks:
      - kafka-network

  kafka-broker-3:
    image: confluentinc/cp-kafka:7.5.0
    hostname: kafka-broker-3
    container_name: kafka-broker-3
    user: root
    ports:
      - "9096:9096"
    environment:
      KAFKA_NODE_ID: 3
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka-broker-1:29093,2@kafka-broker-2:29093,3@kafka-broker-3:29093'

      # 3가지 종류의 Listener를 정의
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT_HOST:PLAINTEXT,PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://kafka-broker-3:29092,PLAINTEXT_HOST://0.0.0.0:9096,CONTROLLER://kafka-broker-3:29093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker-3:29092,PLAINTEXT_HOST://localhost:9096

      # LISTENER 이름별 역할 지정 : 여기서 따로 정의안한건 Client 접근용
      KAFKA_INTER_BROKER_LISTENER_NAMES: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'

      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_DIRS: '/var/lib/kafka/data'

      # JMX 설정 추가
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: localhost

    healthcheck:
      test: ["CMD", "/bin/kafka-topics", "--bootstrap-server", "localhost:9096", "--list"]
      interval: 10s
      timeout: 5s
    restart: unless-stopped
    volumes:
      - kafka-data-3:/var/lib/kafka/data
    networks:
      - kafka-network

  kafka-exporter:
    image: danielqsj/kafka-exporter:latest
    container_name: kafka-exporter
    depends_on:
      kafka-broker-1:
        condition: service_healthy
      kafka-broker-2:
        condition: service_healthy
      kafka-broker-3:
        condition: service_healthy
    ports:
      - "9308:9308"
    command:
      - --kafka.server=kafka-broker-1:29092
      - --kafka.server=kafka-broker-2:29092
      - --kafka.server=kafka-broker-3:29092
      - --topic.filter=.*
      - --group.filter=.*
    restart: unless-stopped
    networks:
      - kafka-network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./analysis/prometheus.yml:/etc/prometheus/prometheus.yml
    restart: unless-stopped
    networks:
      - kafka-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      kafka-broker-1:
        condition: service_healthy
      kafka-broker-2:
        condition: service_healthy
      kafka-broker-3:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: kraft-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka-broker-1:29092,kafka-broker-2:29092,kafka-broker-3:29092
      DYNAMIC_CONFIG_ENABLED: true
    networks:
      - kafka-network

  postgresql:
    build:
      context: .
      dockerfile: postgres/Dockerfile
    image: custom-postgres:15
    container_name: postgresql
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: kafka_data
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "admin"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - kafka-network

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - kafka-network

  flink-jobmanager:
    build:
      context: ./flink-jobs
      dockerfile: Dockerfile
    image: custom-flink:1.18-java11
    container_name: flink-jobmanager
    command: jobmanager
    ports:
      - "8081:8081"
    environment:
      JOB_MANAGER_RPC_ADDRESS: flink-jobmanager
      FLINK_PROPERTIES : |
          state.checkpoints.dir:file:///opt/flink/checkpoints
          jobmanager.memory.process.size: 4096m
          jobmanager.memory.jvm-overhead.min:256m
          jobmanager.memory.jvm-overhead.max:512m
          jobmanager.memory.jvm-overhead.fraction:0.1
          jobmanager.memory.off-heap.size:256m
          jobmanager.memory.managed.fraction:0.4
          jobmanager.memory.managed.size:1024m
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/overview"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    volumes:
      - ./flink-jobs:/scripts:ro # 읽기전용으로 mount
    networks:
      - kafka-network
    depends_on:
      postgresql:
        condition: service_healthy

  flink-taskmanager-1:
    image: custom-flink:1.18-java11
    container_name: flink-taskmanager-1
    command: taskmanager
    environment:
      JOB_MANAGER_RPC_ADDRESS: flink-jobmanager
      TASK_MANAGER_RPC_ADDRESS: flink-jobmanager
      TASK_MANAGER_NUMBER_OF_TASK_SLOTS: 2
      FLINK_PROPERTIES : |
          state.checkpoints.dir:file:///opt/flink/checkpoints
          taskmanager.memory.process.size: 8192m
    networks:
      - kafka-network
    depends_on:
      - flink-jobmanager
    restart: unless-stopped

  flink-taskmanager-2:
    image: custom-flink:1.18-java11
    container_name: flink-taskmanager-2
    command: taskmanager
    environment:
      JOB_MANAGER_RPC_ADDRESS: flink-jobmanager
      TASK_MANAGER_RPC_ADDRESS: flink-jobmanager
      TASK_MANAGER_NUMBER_OF_TASK_SLOTS: 2
      FLINK_PROPERTIES : |
          state.checkpoints.dir:file:///opt/flink/checkpoints
          taskmanager.memory.process.size: 8192m
    networks:
      - kafka-network
    depends_on:
      - flink-jobmanager
    restart: unless-stopped

  # flink-taskmanager-3:
  #   image: custom-flink:1.18-java11
  #   container_name: flink-taskmanager-3
  #   command: taskmanager
  #   environment:
  #     JOB_MANAGER_RPC_ADDRESS: flink-jobmanager
  #     TASK_MANAGER_RPC_ADDRESS: flink-jobmanager
  #     TASK_MANAGER_NUMBER_OF_TASK_SLOTS: 4
  #     FLINK_PROPERTIES : |
  #         state.checkpoints.dir:file:///opt/flink/checkpoints
  #         taskmanager.memory.process.size: 4096m
  #   networks:
  #     - kafka-network
  #   depends_on:
  #     - flink-jobmanager
  #   restart: unless-stopped

  desktop-streamer:
    build:
      context: ./streaming
      dockerfile: Dockerfile.streamer
    image: custom-streamer:latest
    container_name: desktop-streamer
    environment:
      - PLATFORM_NAME=desktop
      - KAFKA_BOOTSTRAP_SERVERS=kafka-broker-1:29092,kafka-broker-2:29092,kafka-broker-3:29092
    volumes:
      - ./streaming/kafka_stream_producer.py:/app/kafka_stream_producer.py
      - ./streaming/kafka_config.yml:/app/kafka_config.yml
      - ./rawdata:/app/rawdata:ro
      - ./logs:/app/logs
    networks:
      - kafka-network
    depends_on:
      kafka-broker-1:
        condition: service_healthy
      kafka-broker-2:
        condition: service_healthy
      kafka-broker-3:
        condition: service_healthy
    profiles:
      - desktop

  mobile-streamer:
    build:
      context: ./streaming
      dockerfile: Dockerfile.streamer
    image: custom-streamer:latest
    container_name: mobile-streamer
    environment:
      - PLATFORM_NAME=mobile
      - KAFKA_BOOTSTRAP_SERVERS=kafka-broker-1:29092,kafka-broker-2:29092,kafka-broker-3:29092
    volumes:
      - ./streaming/kafka_stream_producer.py:/app/kafka_stream_producer.py
      - ./streaming/kafka_config.yml:/app/kafka_config.yml
      - ./rawdata:/app/rawdata:ro
      - ./logs:/app/logs
    networks:
      - kafka-network
    depends_on:
      kafka-broker-1:
        condition: service_healthy
      kafka-broker-2:
        condition: service_healthy
      kafka-broker-3:
        condition: service_healthy
    profiles:
      - mobile

  tablet-streamer:
    build:
      context: ./streaming
      dockerfile: Dockerfile.streamer
    image: custom-streamer:latest
    container_name: tablet-streamer
    environment:
      - PLATFORM_NAME=tablet
      # - KAFKA_BOOTSTRAP_SERVERS=kafka-broker-1:29092,kafka-broker-2:29092,kafka-broker-3:29092
    volumes:
      - ./streaming/kafka_stream_producer.py:/app/kafka_stream_producer.py
      - ./streaming/kafka_config.yml:/app/kafka_config.yml
      - ./rawdata:/app/rawdata:ro
      - ./logs:/app/logs
    networks:
      - kafka-network
    depends_on:
      kafka-broker-1:
        condition: service_healthy
      kafka-broker-2:
        condition: service_healthy
      kafka-broker-3:
        condition: service_healthy
    profiles:
      - tablet

  # Airflow용 PostgreSQL (기존 postgres와 분리)
  airflow-postgres:
    image: postgres:13
    container_name: airflow-postgres
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - airflow-postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    networks:
      - kafka-network

  # Airflow Webserver
  airflow-apiserver:
    <<: *airflow-common
    command: api-server
    container_name: airflow-apiserver
    ports:
      - "8082:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/api/v2/version"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - kafka-network
      

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    container_name: airflow-scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - kafka-network

  airflow-dag-processor:
    <<: *airflow-common
    command: dag-processor
    container_name: airflow-dag-processor
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type DagProcessorJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - kafka-network

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    # yamllint disable rule:line-length
    command:
      - -c
      - |
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
          export AIRFLOW_UID=$$(id -u)
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        echo
        echo "Creating missing opt dirs if missing:"
        echo
        mkdir -v -p /opt/airflow/{logs,dags,plugins,config}
        echo
        echo "Airflow version:"
        /entrypoint airflow version
        echo
        echo "Files in shared volumes:"
        echo
        ls -la /opt/airflow/{logs,dags,plugins,config}
        echo
        echo "Running airflow config list to create default config file if missing."
        echo
        /entrypoint airflow config list >/dev/null
        echo
        echo "Files in shared volumes:"
        echo
        ls -la /opt/airflow/{logs,dags,plugins,config}
        echo
        echo "Change ownership of files in /opt/airflow to ${AIRFLOW_UID}:0"
        echo
        chown -R "${AIRFLOW_UID}:0" /opt/airflow/
        echo
        echo "Change ownership of files in shared volumes to ${AIRFLOW_UID}:0"
        echo
        chown -v -R "${AIRFLOW_UID}:0" /opt/airflow/{logs,dags,plugins,config}
        echo
        echo "Files in shared volumes:"
        echo
        ls -la /opt/airflow/{logs,dags,plugins,config}
    # yamllint enable rule:line-length
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
    user: "0:0"
    networks:
      - kafka-network

networks:
  kafka-network:
    driver: bridge

volumes:
  kafka-data-1:
  kafka-data-2:
  kafka-data-3:
  postgres-data:
  airflow-postgres-db-volume: